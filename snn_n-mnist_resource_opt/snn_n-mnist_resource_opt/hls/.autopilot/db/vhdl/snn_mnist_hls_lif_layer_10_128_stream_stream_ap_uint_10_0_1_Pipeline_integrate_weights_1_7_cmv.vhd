-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_7_cmv is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_7_cmv is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "110110101111", 1 => "110111001011", 2 => "110010010111", 3 => "000001101111", 
    4 => "010000110100", 5 => "000011101000", 6 => "110101111100", 7 => "000111110100", 
    8 => "000111110100", 9 => "111110010101", 10 => "001111000011", 11 => "001001001110", 
    12 => "000100011010", 13 => "111110011000", 14 => "000011010011", 15 => "000101001011", 
    16 => "000111000000", 17 => "001011111000", 18 => "000010000110", 19 => "000011101111", 
    20 => "001111110011", 21 => "111001010100", 22 => "000101011011", 23 => "000101101011", 
    24 => "110110001001", 25 => "010100111001", 26 => "110011100101", 27 => "001010111100", 
    28 => "101100101101", 29 => "001001000110", 30 => "101110010111", 31 => "000000101010", 
    32 => "111000100100", 33 => "000110010000", 34 => "111100000101", 35 => "110100110110", 
    36 => "000010100011", 37 => "000001101001", 38 => "000001000100", 39 => "001011111010", 
    40 => "110011110001", 41 => "000010100000", 42 => "111000000101", 43 => "000100101000", 
    44 => "000111011101", 45 => "000010111111", 46 => "001000011010", 47 => "111001111011", 
    48 => "111010001010", 49 => "000110010111", 50 => "110010100101", 51 => "000101000010", 
    52 => "000100111111", 53 => "111101100010", 54 => "001000100101", 55 => "111001010110", 
    56 => "000010111100", 57 => "001000000101", 58 => "000000111011", 59 => "000100101000", 
    60 => "110010010001", 61 => "001011010011", 62 => "000111111000", 63 => "101110101101", 
    64 => "111110001001", 65 => "101100000111", 66 => "000101100111", 67 => "000000111010", 
    68 => "000000000010", 69 => "111110100001", 70 => "110111111010", 71 => "000100111101", 
    72 => "110110100001", 73 => "000110100011", 74 => "111000101111", 75 => "111000100011", 
    76 => "111001011001", 77 => "111000111010", 78 => "001110010100", 79 => "111011110110", 
    80 => "001010001110", 81 => "111000110001", 82 => "000110001110", 83 => "001001100010", 
    84 => "111001001101", 85 => "000101100010", 86 => "101111011110", 87 => "110110111000", 
    88 => "000101010101", 89 => "111001010010", 90 => "001000001111", 91 => "111000101101", 
    92 => "000001101011", 93 => "111100000010", 94 => "001000001101", 95 => "111111111000", 
    96 => "000011101000", 97 => "110011001000", 98 => "000110010111", 99 => "000111001101", 
    100 => "111000101000", 101 => "111101101110", 102 => "000001000101", 103 => "110001011100", 
    104 => "000000000110", 105 => "000001010001", 106 => "111010011101", 107 => "000010010001", 
    108 => "111101100001", 109 => "110110111001", 110 => "000101000011", 111 => "110011000110", 
    112 => "110110110110", 113 => "000010111110", 114 => "101001101100", 115 => "111110011011", 
    116 => "000011110110", 117 => "111011011001", 118 => "111011100001", 119 => "001110001010", 
    120 => "111011001010", 121 => "111101100110", 122 => "111011100101", 123 => "110010111100", 
    124 => "000100101110", 125 => "111010111011", 126 => "110100100111", 127 => "111100001001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

