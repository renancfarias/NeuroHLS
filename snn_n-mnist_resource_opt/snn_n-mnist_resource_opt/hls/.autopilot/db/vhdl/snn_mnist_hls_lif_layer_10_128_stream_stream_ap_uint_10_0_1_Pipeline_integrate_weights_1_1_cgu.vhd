-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_1_cgu is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_1_cgu is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111001101110", 1 => "111100100111", 2 => "000111101010", 3 => "000101101010", 
    4 => "001011010000", 5 => "111101111000", 6 => "111111101011", 7 => "111011111111", 
    8 => "001011101010", 9 => "000101011110", 10 => "111110010010", 11 => "111001111011", 
    12 => "111010000000", 13 => "111010100000", 14 => "110011001101", 15 => "111100100011", 
    16 => "000101001010", 17 => "001100100011", 18 => "000011101000", 19 => "110101001110", 
    20 => "111010011001", 21 => "000011001000", 22 => "000011011101", 23 => "110100001101", 
    24 => "001011001011", 25 => "000000100001", 26 => "001001110110", 27 => "111110011110", 
    28 => "111101100101", 29 => "110011011100", 30 => "000010100001", 31 => "000011000111", 
    32 => "001001100000", 33 => "000011000110", 34 => "110110001011", 35 => "000101111011", 
    36 => "111111101000", 37 => "110111000000", 38 => "000001011010", 39 => "010000010010", 
    40 => "111110011110", 41 => "110100111001", 42 => "000011111010", 43 => "111111001010", 
    44 => "110111011101", 45 => "000111010110", 46 => "000110111001", 47 => "001001011000", 
    48 => "000011001110", 49 => "111000000011", 50 => "110011000111", 51 => "000011100100", 
    52 => "110100000101", 53 => "110111000001", 54 => "111010101000", 55 => "111000111000", 
    56 => "110100100110", 57 => "001101000110", 58 => "001001000001", 59 => "001111101000", 
    60 => "010010110100", 61 => "111010011101", 62 => "111000001100", 63 => "110111001000", 
    64 => "000101101101", 65 => "000001011100", 66 => "000101100111", 67 => "111111010110", 
    68 => "110110010001", 69 => "110100111111", 70 => "111110100101", 71 => "001000111011", 
    72 => "000100011101", 73 => "000111110010", 74 => "110100111000", 75 => "000110001000", 
    76 => "000001011100", 77 => "110111100100", 78 => "110010100000", 79 => "110011101010", 
    80 => "001001010011", 81 => "001011011011", 82 => "111101001100", 83 => "111010110111", 
    84 => "010001111010", 85 => "111111011101", 86 => "001001110110", 87 => "111010100101", 
    88 => "001111100001", 89 => "111101100101", 90 => "111010000100", 91 => "001010001010", 
    92 => "111001010100", 93 => "000011111101", 94 => "001000001100", 95 => "000100101110", 
    96 => "001000100000", 97 => "001111000011", 98 => "111001011001", 99 => "001010111111", 
    100 => "111010101110", 101 => "101011000011", 102 => "110011111011", 103 => "111010011011", 
    104 => "000000001010", 105 => "000010010101", 106 => "110111010010", 107 => "000100010000", 
    108 => "110101011101", 109 => "001011100100", 110 => "000111101101", 111 => "001001011111", 
    112 => "001100110100", 113 => "111110110100", 114 => "111110000101", 115 => "111001111000", 
    116 => "000101001000", 117 => "111010000100", 118 => "111111111011", 119 => "111110101100", 
    120 => "110111000110", 121 => "001000011100", 122 => "110110001111", 123 => "111101000001", 
    124 => "001011000110", 125 => "110110011001", 126 => "111101010001", 127 => "110101101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

