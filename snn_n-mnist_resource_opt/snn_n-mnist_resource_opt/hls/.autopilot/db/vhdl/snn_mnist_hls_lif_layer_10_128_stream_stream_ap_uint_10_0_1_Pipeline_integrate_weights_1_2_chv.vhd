-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_2_chv is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_2_chv is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000001110101", 1 => "000111101010", 2 => "000110001011", 3 => "000100000100", 
    4 => "000100101100", 5 => "000010011000", 6 => "000000000000", 7 => "000001010111", 
    8 => "110101011000", 9 => "000110000101", 10 => "111111000101", 11 => "111101000011", 
    12 => "111000110000", 13 => "000101100101", 14 => "101110010011", 15 => "111101110110", 
    16 => "110110101110", 17 => "001000001111", 18 => "000011001111", 19 => "111101000101", 
    20 => "001001111010", 21 => "000110010010", 22 => "000110011110", 23 => "111111000111", 
    24 => "110010110111", 25 => "001101000101", 26 => "111110011010", 27 => "111011000001", 
    28 => "000001001110", 29 => "000001010011", 30 => "110010101100", 31 => "000111001111", 
    32 => "110110011100", 33 => "110001101100", 34 => "111001100110", 35 => "001001000000", 
    36 => "000100111101", 37 => "111111111110", 38 => "111111011110", 39 => "101010110010", 
    40 => "101111111101", 41 => "110011110100", 42 => "110011100100", 43 => "001100110111", 
    44 => "111101001110", 45 => "001001001111", 46 => "001010010100", 47 => "000010001000", 
    48 => "000001111010", 49 => "111111011111", 50 => "000001111010", 51 => "000110001010", 
    52 => "000001110011", 53 => "110111010111", 54 => "000011001101", 55 => "000101100001", 
    56 => "111100001110", 57 => "000110011101", 58 => "000111000101", 59 => "111000000010", 
    60 => "111101001111", 61 => "001101011110", 62 => "001100000100", 63 => "000010000000", 
    64 => "101101100111", 65 => "110100101000", 66 => "110110011100", 67 => "111100011111", 
    68 => "001101000000", 69 => "111011010110", 70 => "000001110001", 71 => "111001011001", 
    72 => "000100000011", 73 => "001001000000", 74 => "111010011011", 75 => "000011110001", 
    76 => "111110111010", 77 => "111010101010", 78 => "000011000000", 79 => "111101000111", 
    80 => "111111110101", 81 => "000001111110", 82 => "000111100010", 83 => "101100100011", 
    84 => "111101101000", 85 => "000101000001", 86 => "111111100011", 87 => "000000011111", 
    88 => "001000101111", 89 => "111111111101", 90 => "111011110001", 91 => "111010011001", 
    92 => "000011111110", 93 => "000011011001", 94 => "000101111000", 95 => "110100110001", 
    96 => "111001000000", 97 => "110110101001", 98 => "000010111101", 99 => "101101100001", 
    100 => "111000101111", 101 => "000100011111", 102 => "110100110001", 103 => "000101001000", 
    104 => "111001100110", 105 => "000011111100", 106 => "110011100101", 107 => "110001010010", 
    108 => "111011101100", 109 => "000101001100", 110 => "001000111000", 111 => "010000101010", 
    112 => "000111100110", 113 => "110101001011", 114 => "000011001101", 115 => "000101101100", 
    116 => "001010011011", 117 => "111010111011", 118 => "000010110001", 119 => "111001100110", 
    120 => "001010110011", 121 => "111000011000", 122 => "000001000000", 123 => "000001011101", 
    124 => "110110000000", 125 => "110101111100", 126 => "001101011100", 127 => "111100001000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

