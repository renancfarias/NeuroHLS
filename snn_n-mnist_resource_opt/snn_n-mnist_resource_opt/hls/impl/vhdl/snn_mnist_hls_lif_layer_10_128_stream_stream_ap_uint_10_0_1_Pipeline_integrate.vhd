-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_promoted22 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted20 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted18 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted16 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted14 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted12 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted10 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted8 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted6 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_promoted : IN STD_LOGIC_VECTOR (8 downto 0);
    out1_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    out1_empty_n : IN STD_LOGIC;
    out1_read : OUT STD_LOGIC;
    add_ln74_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_out_ap_vld : OUT STD_LOGIC;
    add_ln74_128_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_128_out_ap_vld : OUT STD_LOGIC;
    add_ln74_129_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_129_out_ap_vld : OUT STD_LOGIC;
    add_ln74_130_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_130_out_ap_vld : OUT STD_LOGIC;
    add_ln74_131_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_131_out_ap_vld : OUT STD_LOGIC;
    add_ln74_132_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_132_out_ap_vld : OUT STD_LOGIC;
    add_ln74_133_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_133_out_ap_vld : OUT STD_LOGIC;
    add_ln74_134_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_134_out_ap_vld : OUT STD_LOGIC;
    add_ln74_135_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_135_out_ap_vld : OUT STD_LOGIC;
    add_ln74_136_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    add_ln74_136_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal tmp_s_nbreadreq_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal weights_1_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_0_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_1_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_2_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_3_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_4_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_5_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_6_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_7_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_8_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_1_9_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal out1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal out1_read_reg_763 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_1_0_load_reg_822 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_1_load_reg_827 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_2_load_reg_832 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_3_load_reg_837 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_4_load_reg_842 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_5_load_reg_847 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_6_load_reg_852 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_7_load_reg_857 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_8_load_reg_862 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_1_9_load_reg_867 : STD_LOGIC_VECTOR (11 downto 0);
    signal idxprom39_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal conv_i_i185_fu_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted_cast_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal conv_i_i18_17_fu_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_128_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted6_cast_fu_414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_29_fu_104 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_129_fu_566_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted8_cast_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_311_fu_108 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_130_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted10_cast_fu_422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_413_fu_112 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_131_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted12_cast_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_515_fu_116 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_132_fu_596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted14_cast_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_617_fu_120 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_133_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted16_cast_fu_434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_719_fu_124 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_134_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted18_cast_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_821_fu_128 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_135_fu_626_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted20_cast_fu_442_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i18_923_fu_132 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln74_136_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_promoted22_cast_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal weights_1_0_ce0_local : STD_LOGIC;
    signal weights_1_1_ce0_local : STD_LOGIC;
    signal weights_1_2_ce0_local : STD_LOGIC;
    signal weights_1_3_ce0_local : STD_LOGIC;
    signal weights_1_4_ce0_local : STD_LOGIC;
    signal weights_1_5_ce0_local : STD_LOGIC;
    signal weights_1_6_ce0_local : STD_LOGIC;
    signal weights_1_7_ce0_local : STD_LOGIC;
    signal weights_1_8_ce0_local : STD_LOGIC;
    signal weights_1_9_ce0_local : STD_LOGIC;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal sext_ln74_fu_543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_128_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_129_fu_563_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_130_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_131_fu_583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_132_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_133_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_134_fu_613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_135_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_136_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_0_cfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_1_cgu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_2_chv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_3_civ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_4_cjv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_5_ckv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_6_clv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_7_cmv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_8_cnw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_9_cow IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component snn_mnist_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    weights_1_0_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_0_cfu
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_0_address0,
        ce0 => weights_1_0_ce0_local,
        q0 => weights_1_0_q0);

    weights_1_1_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_1_cgu
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_1_address0,
        ce0 => weights_1_1_ce0_local,
        q0 => weights_1_1_q0);

    weights_1_2_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_2_chv
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_2_address0,
        ce0 => weights_1_2_ce0_local,
        q0 => weights_1_2_q0);

    weights_1_3_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_3_civ
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_3_address0,
        ce0 => weights_1_3_ce0_local,
        q0 => weights_1_3_q0);

    weights_1_4_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_4_cjv
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_4_address0,
        ce0 => weights_1_4_ce0_local,
        q0 => weights_1_4_q0);

    weights_1_5_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_5_ckv
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_5_address0,
        ce0 => weights_1_5_ce0_local,
        q0 => weights_1_5_q0);

    weights_1_6_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_6_clv
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_6_address0,
        ce0 => weights_1_6_ce0_local,
        q0 => weights_1_6_q0);

    weights_1_7_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_7_cmv
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_7_address0,
        ce0 => weights_1_7_ce0_local,
        q0 => weights_1_7_q0);

    weights_1_8_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_8_cnw
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_8_address0,
        ce0 => weights_1_8_ce0_local,
        q0 => weights_1_8_q0);

    weights_1_9_U : component snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_9_cow
    generic map (
        DataWidth => 12,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_1_9_address0,
        ce0 => weights_1_9_ce0_local,
        q0 => weights_1_9_q0);

    flow_control_loop_pipe_sequential_init_U : component snn_mnist_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    conv_i_i185_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i185_fu_96 <= p_promoted_cast_fu_410_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i185_fu_96 <= add_ln74_fu_546_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_17_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_17_fu_100 <= p_promoted6_cast_fu_414_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_17_fu_100 <= add_ln74_128_fu_556_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_29_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_29_fu_104 <= p_promoted8_cast_fu_418_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_29_fu_104 <= add_ln74_129_fu_566_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_311_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_311_fu_108 <= p_promoted10_cast_fu_422_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_311_fu_108 <= add_ln74_130_fu_576_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_413_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_413_fu_112 <= p_promoted12_cast_fu_426_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_413_fu_112 <= add_ln74_131_fu_586_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_515_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_515_fu_116 <= p_promoted14_cast_fu_430_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_515_fu_116 <= add_ln74_132_fu_596_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_617_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_617_fu_120 <= p_promoted16_cast_fu_434_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_617_fu_120 <= add_ln74_133_fu_606_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_719_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_719_fu_124 <= p_promoted18_cast_fu_438_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_719_fu_124 <= add_ln74_134_fu_616_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_821_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_821_fu_128 <= p_promoted20_cast_fu_442_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_821_fu_128 <= add_ln74_135_fu_626_p2;
            end if; 
        end if;
    end process;

    conv_i_i18_923_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_i_i18_923_fu_132 <= p_promoted22_cast_fu_446_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_i_i18_923_fu_132 <= add_ln74_136_fu_636_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out1_read_reg_763 <= out1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_s_reg_818 <= tmp_s_nbreadreq_fu_202_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weights_1_0_load_reg_822 <= weights_1_0_q0;
                weights_1_1_load_reg_827 <= weights_1_1_q0;
                weights_1_2_load_reg_832 <= weights_1_2_q0;
                weights_1_3_load_reg_837 <= weights_1_3_q0;
                weights_1_4_load_reg_842 <= weights_1_4_q0;
                weights_1_5_load_reg_847 <= weights_1_5_q0;
                weights_1_6_load_reg_852 <= weights_1_6_q0;
                weights_1_7_load_reg_857 <= weights_1_7_q0;
                weights_1_8_load_reg_862 <= weights_1_8_q0;
                weights_1_9_load_reg_867 <= weights_1_9_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln74_128_fu_556_p2 <= std_logic_vector(signed(sext_ln74_128_fu_553_p1) + signed(conv_i_i18_17_fu_100));
    add_ln74_128_out <= std_logic_vector(signed(sext_ln74_128_fu_553_p1) + signed(conv_i_i18_17_fu_100));

    add_ln74_128_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_128_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_128_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_129_fu_566_p2 <= std_logic_vector(signed(sext_ln74_129_fu_563_p1) + signed(conv_i_i18_29_fu_104));
    add_ln74_129_out <= std_logic_vector(signed(sext_ln74_129_fu_563_p1) + signed(conv_i_i18_29_fu_104));

    add_ln74_129_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_129_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_129_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_130_fu_576_p2 <= std_logic_vector(signed(sext_ln74_130_fu_573_p1) + signed(conv_i_i18_311_fu_108));
    add_ln74_130_out <= std_logic_vector(signed(sext_ln74_130_fu_573_p1) + signed(conv_i_i18_311_fu_108));

    add_ln74_130_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_130_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_130_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_131_fu_586_p2 <= std_logic_vector(signed(sext_ln74_131_fu_583_p1) + signed(conv_i_i18_413_fu_112));
    add_ln74_131_out <= std_logic_vector(signed(sext_ln74_131_fu_583_p1) + signed(conv_i_i18_413_fu_112));

    add_ln74_131_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_131_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_131_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_132_fu_596_p2 <= std_logic_vector(signed(sext_ln74_132_fu_593_p1) + signed(conv_i_i18_515_fu_116));
    add_ln74_132_out <= std_logic_vector(signed(sext_ln74_132_fu_593_p1) + signed(conv_i_i18_515_fu_116));

    add_ln74_132_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_132_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_132_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_133_fu_606_p2 <= std_logic_vector(signed(sext_ln74_133_fu_603_p1) + signed(conv_i_i18_617_fu_120));
    add_ln74_133_out <= std_logic_vector(signed(sext_ln74_133_fu_603_p1) + signed(conv_i_i18_617_fu_120));

    add_ln74_133_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_133_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_133_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_134_fu_616_p2 <= std_logic_vector(signed(sext_ln74_134_fu_613_p1) + signed(conv_i_i18_719_fu_124));
    add_ln74_134_out <= std_logic_vector(signed(sext_ln74_134_fu_613_p1) + signed(conv_i_i18_719_fu_124));

    add_ln74_134_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_134_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_134_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_135_fu_626_p2 <= std_logic_vector(signed(sext_ln74_135_fu_623_p1) + signed(conv_i_i18_821_fu_128));
    add_ln74_135_out <= std_logic_vector(signed(sext_ln74_135_fu_623_p1) + signed(conv_i_i18_821_fu_128));

    add_ln74_135_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_135_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_135_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_136_fu_636_p2 <= std_logic_vector(signed(sext_ln74_136_fu_633_p1) + signed(conv_i_i18_923_fu_132));
    add_ln74_136_out <= std_logic_vector(signed(sext_ln74_136_fu_633_p1) + signed(conv_i_i18_923_fu_132));

    add_ln74_136_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_136_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_136_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_fu_546_p2 <= std_logic_vector(signed(sext_ln74_fu_543_p1) + signed(conv_i_i185_fu_96));
    add_ln74_out <= std_logic_vector(signed(sext_ln74_fu_543_p1) + signed(conv_i_i185_fu_96));

    add_ln74_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_s_reg_818, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (tmp_s_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add_ln74_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln74_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0, out1_empty_n)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((out1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, out1_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((out1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, tmp_s_nbreadreq_fu_202_p3)
    begin
        if (((tmp_s_nbreadreq_fu_202_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    idxprom39_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out1_read_reg_763),64));

    out1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, out1_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out1_blk_n <= out1_empty_n;
        else 
            out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out1_read <= ap_const_logic_1;
        else 
            out1_read <= ap_const_logic_0;
        end if; 
    end process;

        p_promoted10_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted10),16));

        p_promoted12_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted12),16));

        p_promoted14_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted14),16));

        p_promoted16_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted16),16));

        p_promoted18_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted18),16));

        p_promoted20_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted20),16));

        p_promoted22_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted22),16));

        p_promoted6_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted6),16));

        p_promoted8_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted8),16));

        p_promoted_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_promoted),16));

        sext_ln74_128_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_1_load_reg_827),16));

        sext_ln74_129_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_2_load_reg_832),16));

        sext_ln74_130_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_3_load_reg_837),16));

        sext_ln74_131_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_4_load_reg_842),16));

        sext_ln74_132_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_5_load_reg_847),16));

        sext_ln74_133_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_6_load_reg_852),16));

        sext_ln74_134_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_7_load_reg_857),16));

        sext_ln74_135_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_8_load_reg_862),16));

        sext_ln74_136_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_9_load_reg_867),16));

        sext_ln74_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_1_0_load_reg_822),16));

    tmp_s_nbreadreq_fu_202_p3 <= (0=>(out1_empty_n), others=>'-');
    weights_1_0_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_0_ce0_local <= ap_const_logic_1;
        else 
            weights_1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_1_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_1_ce0_local <= ap_const_logic_1;
        else 
            weights_1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_2_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_2_ce0_local <= ap_const_logic_1;
        else 
            weights_1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_3_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_3_ce0_local <= ap_const_logic_1;
        else 
            weights_1_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_4_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_4_ce0_local <= ap_const_logic_1;
        else 
            weights_1_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_5_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_5_ce0_local <= ap_const_logic_1;
        else 
            weights_1_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_6_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_6_ce0_local <= ap_const_logic_1;
        else 
            weights_1_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_7_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_7_ce0_local <= ap_const_logic_1;
        else 
            weights_1_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_8_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_8_ce0_local <= ap_const_logic_1;
        else 
            weights_1_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_9_address0 <= idxprom39_fu_500_p1(7 - 1 downto 0);

    weights_1_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_1_9_ce0_local <= ap_const_logic_1;
        else 
            weights_1_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
