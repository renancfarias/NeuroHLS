-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_8_cnw is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_8_cnw is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111111100101", 1 => "110111000111", 2 => "111100111010", 3 => "111011110011", 
    4 => "111000110101", 5 => "111111110110", 6 => "000000010001", 7 => "110101010011", 
    8 => "111100100110", 9 => "000001101000", 10 => "110111001101", 11 => "111100100011", 
    12 => "111010001011", 13 => "000001110111", 14 => "111110000111", 15 => "000100011001", 
    16 => "111100100111", 17 => "111100000000", 18 => "111101111111", 19 => "111010001010", 
    20 => "101110110101", 21 => "111001110000", 22 => "000010000111", 23 => "111011010100", 
    24 => "000110000100", 25 => "110100001111", 26 => "111110111000", 27 => "110110011111", 
    28 => "000111100011", 29 => "111111101001", 30 => "000011010111", 31 => "000110111001", 
    32 => "111001101001", 33 => "111101010001", 34 => "111010000110", 35 => "111010011010", 
    36 => "000010000100", 37 => "000110010111", 38 => "000110101111", 39 => "111001011110", 
    40 => "111101000011", 41 => "110110111101", 42 => "111100001010", 43 => "111010010100", 
    44 => "000011110000", 45 => "110010111001", 46 => "111011111011", 47 => "000100000001", 
    48 => "111000101011", 49 => "111011001110", 50 => "111000110001", 51 => "110010100010", 
    52 => "000001010110", 53 => "000111000000", 54 => "000011011011", 55 => "000110011000", 
    56 => "000011001100", 57 => "110111111111", 58 => "001000000101", 59 => "110110101101", 
    60 => "000000110010", 61 => "101100001010", 62 => "111100100010", 63 => "000000011110", 
    64 => "000011111100", 65 => "000101011010", 66 => "000100001101", 67 => "000100110101", 
    68 => "111100010011", 69 => "001010100111", 70 => "000101010111", 71 => "000101000001", 
    72 => "111011001100", 73 => "111010100011", 74 => "111100011100", 75 => "000100011110", 
    76 => "001000111111", 77 => "000011010111", 78 => "110011011000", 79 => "000011011010", 
    80 => "110100111000", 81 => "000000010111", 82 => "000011001111", 83 => "110011001101", 
    84 => "111000101001", 85 => "001100000111", 86 => "000001010000", 87 => "101011001101", 
    88 => "110001111001", 89 => "000101101010", 90 => "111011100111", 91 => "110010010011", 
    92 => "110111011010", 93 => "000001011111", 94 => "000010001101", 95 => "111101001100", 
    96 => "110110000101", 97 => "000101111111", 98 => "000000111011", 99 => "110111001010", 
    100 => "000100011101", 101 => "000011111110", 102 => "000010101101", 103 => "000110111101", 
    104 => "000000001101", 105 => "000101011001", 106 => "111110111101", 107 => "000011011000", 
    108 => "000011001100", 109 => "110101110011", 110 => "110111000100", 111 => "111111010011", 
    112 => "111101101011", 113 => "110110001110", 114 => "000011001111", 115 => "001001101001", 
    116 => "000010010101", 117 => "111111010110", 118 => "000110000100", 119 => "110000101110", 
    120 => "000000001100", 121 => "111000010011", 122 => "000001001001", 123 => "110001010110", 
    124 => "110011001010", 125 => "000001111111", 126 => "000110101110", 127 => "000101010000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

