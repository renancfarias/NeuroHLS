-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_5_ckv is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_5_ckv is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000111000001", 1 => "110101000101", 2 => "000001111100", 3 => "001000100000", 
    4 => "101000110011", 5 => "000100111001", 6 => "111111000001", 7 => "111100000100", 
    8 => "110010111100", 9 => "001001010010", 10 => "101101101010", 11 => "111101111011", 
    12 => "111001011111", 13 => "110010110110", 14 => "000100101010", 15 => "110111010001", 
    16 => "000100011001", 17 => "111010111011", 18 => "000101000011", 19 => "000100000110", 
    20 => "111100101001", 21 => "111110101101", 22 => "101100011111", 23 => "111000111001", 
    24 => "111010100111", 25 => "111011100111", 26 => "000011001011", 27 => "010000010100", 
    28 => "000011111100", 29 => "111001101110", 30 => "010000001011", 31 => "000011110010", 
    32 => "000100101110", 33 => "111110010100", 34 => "111101011110", 35 => "111101110111", 
    36 => "000100100101", 37 => "111110011011", 38 => "111001010001", 39 => "111011011100", 
    40 => "001010000100", 41 => "000111110100", 42 => "000110010100", 43 => "110101101000", 
    44 => "000010101100", 45 => "110011100010", 46 => "111011010110", 47 => "000100010111", 
    48 => "111100111001", 49 => "111011110110", 50 => "001000101100", 51 => "001110001011", 
    52 => "000001000001", 53 => "111101100110", 54 => "001000010011", 55 => "000001000110", 
    56 => "000100001110", 57 => "101101111011", 58 => "111011010001", 59 => "111001010100", 
    60 => "111110001011", 61 => "111010100110", 62 => "111000000001", 63 => "000101010100", 
    64 => "000111100111", 65 => "000101010010", 66 => "000011100111", 67 => "110111111110", 
    68 => "111100000000", 69 => "111100111111", 70 => "111100111101", 71 => "110010011111", 
    72 => "110000000100", 73 => "110001101111", 74 => "000010100001", 75 => "111010101110", 
    76 => "000001011001", 77 => "111011111010", 78 => "000100010010", 79 => "000100100011", 
    80 => "110000110101", 81 => "000010001010", 82 => "101100010111", 83 => "000100110101", 
    84 => "111100111011", 85 => "110101010110", 86 => "000110100001", 87 => "001000110110", 
    88 => "110010100110", 89 => "000111010010", 90 => "111011100111", 91 => "000011101101", 
    92 => "110111000101", 93 => "111100100000", 94 => "110110101100", 95 => "000011101010", 
    96 => "000111110101", 97 => "000001100010", 98 => "111110111010", 99 => "010100011001", 
    100 => "001001111010", 101 => "000111101100", 102 => "000100110010", 103 => "000101000111", 
    104 => "000000010100", 105 => "110000101111", 106 => "010010011001", 107 => "111000010101", 
    108 => "000000100010", 109 => "111110010000", 110 => "111110010100", 111 => "111101111010", 
    112 => "111001000011", 113 => "001110110110", 114 => "000011011010", 115 => "111001110101", 
    116 => "111010110101", 117 => "001000001101", 118 => "111110101100", 119 => "001001000011", 
    120 => "111110101010", 121 => "000000101101", 122 => "111111011010", 123 => "110111101011", 
    124 => "110010111001", 125 => "000100110111", 126 => "110000101001", 127 => "000000110001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

