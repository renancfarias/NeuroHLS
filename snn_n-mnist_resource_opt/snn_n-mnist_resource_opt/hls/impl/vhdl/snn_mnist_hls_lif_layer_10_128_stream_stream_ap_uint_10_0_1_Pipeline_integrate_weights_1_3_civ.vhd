-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_3_civ is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_3_civ is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000110101111", 1 => "111101001010", 2 => "111101000011", 3 => "111101010000", 
    4 => "110110011010", 5 => "000011111011", 6 => "111011111011", 7 => "111100011001", 
    8 => "101101000001", 9 => "110111001101", 10 => "000110010011", 11 => "000100100001", 
    12 => "111010110010", 13 => "000101111101", 14 => "000110010011", 15 => "000010010101", 
    16 => "000001110111", 17 => "001000100011", 18 => "111001011000", 19 => "111101110101", 
    20 => "001101111110", 21 => "000111100111", 22 => "000111100110", 23 => "000000100000", 
    24 => "101101111010", 25 => "111100010010", 26 => "111011010011", 27 => "110100010010", 
    28 => "000110011000", 29 => "000000100000", 30 => "000110001010", 31 => "111000111110", 
    32 => "110010101011", 33 => "000011010010", 34 => "111110011001", 35 => "000001000110", 
    36 => "001000101101", 37 => "110110011000", 38 => "111001100000", 39 => "110011011001", 
    40 => "001000111110", 41 => "001010011111", 42 => "110100011001", 43 => "000111010010", 
    44 => "111101010111", 45 => "000110000001", 46 => "001010001010", 47 => "000100100010", 
    48 => "000011001001", 49 => "000110010100", 50 => "001000101010", 51 => "110111101011", 
    52 => "000011010111", 53 => "111101001011", 54 => "000011000000", 55 => "111111100110", 
    56 => "111110101010", 57 => "000011111100", 58 => "111111001000", 59 => "110100100011", 
    60 => "110100000010", 61 => "110011101000", 62 => "000010101010", 63 => "000111000101", 
    64 => "000001101011", 65 => "110001001101", 66 => "000100000011", 67 => "111000111000", 
    68 => "111101100000", 69 => "111110010100", 70 => "110110001100", 71 => "111011011101", 
    72 => "101011001110", 73 => "111000001100", 74 => "000011110010", 75 => "111001001110", 
    76 => "000001100111", 77 => "110111101111", 78 => "110010101000", 79 => "000010000000", 
    80 => "101100111001", 81 => "111000011000", 82 => "000110000000", 83 => "111111010100", 
    84 => "111111111011", 85 => "000111010000", 86 => "000110110010", 87 => "000111000011", 
    88 => "001001101011", 89 => "000101100001", 90 => "111100110101", 91 => "000011100011", 
    92 => "110111111011", 93 => "000101101100", 94 => "000100010000", 95 => "111000110000", 
    96 => "111000001001", 97 => "110110010011", 98 => "000001111000", 99 => "111011101110", 
    100 => "111111011001", 101 => "111111011010", 102 => "000011010101", 103 => "111101110001", 
    104 => "001010000100", 105 => "000011010011", 106 => "001101011100", 107 => "000110000111", 
    108 => "000100110011", 109 => "111010001010", 110 => "111101110101", 111 => "111100101101", 
    112 => "000100100010", 113 => "110010001111", 114 => "001010000000", 115 => "111101111100", 
    116 => "111100001010", 117 => "111101010001", 118 => "111100011100", 119 => "000110001101", 
    120 => "111111000101", 121 => "001110001000", 122 => "111101110001", 123 => "110011110111", 
    124 => "000010011010", 125 => "000011011110", 126 => "110100011100", 127 => "110110111000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

