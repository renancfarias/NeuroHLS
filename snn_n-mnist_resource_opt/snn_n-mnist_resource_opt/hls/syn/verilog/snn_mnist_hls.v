// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="snn_mnist_hls_snn_mnist_hls,hls_ip_2024_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-fbva676-3-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.738000,HLS_SYN_LAT=182,HLS_SYN_TPT=none,HLS_SYN_MEM=139,HLS_SYN_DSP=0,HLS_SYN_FF=15633,HLS_SYN_LUT=18614,HLS_VERSION=2024_2_2}" *)

module snn_mnist_hls (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_dout,
        input_r_empty_n,
        input_r_read,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] input_r_dout;
input   input_r_empty_n;
output   input_r_read;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
output  [3:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [0:0] output_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_nbreadreq_fu_638_p3;
reg   [0:0] tmp_reg_1343;
wire    ap_CS_fsm_state5;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_idle;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_ready;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_input_r_read;
wire   [9:0] grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_din;
wire    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_write;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_idle;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_ready;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out1_read;
wire   [9:0] grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_din;
wire    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_write;
reg    grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    out1_full_n;
reg    out1_write;
reg    grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [9:0] out1_dout;
wire    out1_empty_n;
reg    out1_read;
wire    ap_CS_fsm_state4;
wire    out2_full_n;
reg    out2_write;
wire   [63:0] zext_ln30_fu_1325_p1;
wire    ap_CS_fsm_state6;
wire   [9:0] out2_dout;
wire    out2_empty_n;
reg    out2_read;
reg    output_r_we1_local;
reg    output_r_ce1_local;
reg   [3:0] output_r_address1_local;
reg    output_r_we0_local;
reg   [0:0] output_r_d0_local;
reg    output_r_ce0_local;
reg   [3:0] output_r_address0_local;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg = 1'b0;
#0 grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg = 1'b0;
end

snn_mnist_hls_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start),
    .ap_done(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done),
    .ap_idle(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_idle),
    .ap_ready(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_ready),
    .input_r_dout(input_r_dout),
    .input_r_empty_n(input_r_empty_n),
    .input_r_read(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_input_r_read),
    .out1_din(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_din),
    .out1_full_n(out1_full_n),
    .out1_write(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_write)
);

snn_mnist_hls_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start),
    .ap_done(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done),
    .ap_idle(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_idle),
    .ap_ready(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_ready),
    .out1_dout(out1_dout),
    .out1_empty_n(out1_empty_n),
    .out1_read(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out1_read),
    .out2_din(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_din),
    .out2_full_n(out2_full_n),
    .out2_write(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_write)
);

snn_mnist_hls_fifo_w10_d128_A out1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_din),
    .if_full_n(out1_full_n),
    .if_write(out1_write),
    .if_dout(out1_dout),
    .if_empty_n(out1_empty_n),
    .if_read(out1_read)
);

snn_mnist_hls_fifo_w10_d10_S out2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_din),
    .if_full_n(out2_full_n),
    .if_write(out2_write),
    .if_dout(out2_dout),
    .if_empty_n(out2_empty_n),
    .if_read(out2_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg <= 1'b1;
        end else if ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_ready == 1'b1)) begin
            grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg <= 1'b1;
        end else if ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_ready == 1'b1)) begin
            grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_1343 <= grp_nbreadreq_fu_638_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((out2_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((tmp_reg_1343 == 1'd0) | (grp_nbreadreq_fu_638_p3 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((tmp_reg_1343 == 1'd0) | (grp_nbreadreq_fu_638_p3 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out1_read = grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out1_read;
    end else begin
        out1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out1_write = grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_out1_write;
    end else begin
        out1_write = 1'b0;
    end
end

always @ (*) begin
    if (((out2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        out2_read = 1'b1;
    end else begin
        out2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out2_write = grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_out2_write;
    end else begin
        out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0_local = zext_ln30_fu_1325_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0_local = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0_local = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0_local = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0_local = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_address0_local = 64'd1;
    end else begin
        output_r_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address1_local = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address1_local = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address1_local = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address1_local = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_address1_local = 64'd0;
    end else begin
        output_r_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((out2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        output_r_ce0_local = 1'b1;
    end else begin
        output_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        output_r_ce1_local = 1'b1;
    end else begin
        output_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0_local = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state1))) begin
        output_r_d0_local = 1'd0;
    end else begin
        output_r_d0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((out2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        output_r_we0_local = 1'b1;
    end else begin
        output_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        output_r_we1_local = 1'b1;
    end else begin
        output_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_nbreadreq_fu_638_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((out2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((tmp_reg_1343 == 1'd0) | (grp_nbreadreq_fu_638_p3 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start = grp_lif_layer_10_128_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_1279_ap_start_reg;

assign grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start = grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_ap_start_reg;

assign grp_nbreadreq_fu_638_p3 = out2_empty_n;

assign input_r_read = grp_lif_layer_128_784_stream_ap_uint_10_0_stream_ap_uint_10_0_1_s_fu_760_input_r_read;

assign output_r_address0 = output_r_address0_local;

assign output_r_address1 = output_r_address1_local;

assign output_r_ce0 = output_r_ce0_local;

assign output_r_ce1 = output_r_ce1_local;

assign output_r_d0 = output_r_d0_local;

assign output_r_d1 = 1'd0;

assign output_r_we0 = output_r_we0_local;

assign output_r_we1 = output_r_we1_local;

assign zext_ln30_fu_1325_p1 = out2_dout;

endmodule //snn_mnist_hls
