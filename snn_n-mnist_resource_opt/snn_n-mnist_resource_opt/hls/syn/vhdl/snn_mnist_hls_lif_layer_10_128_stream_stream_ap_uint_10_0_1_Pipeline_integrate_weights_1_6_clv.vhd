-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_6_clv is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_6_clv is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000010100000", 1 => "001000010000", 2 => "000101011111", 3 => "111110100000", 
    4 => "111101000101", 5 => "111011011000", 6 => "000111000000", 7 => "111101010111", 
    8 => "001010000010", 9 => "000101010111", 10 => "110000111001", 11 => "111011101011", 
    12 => "000110001011", 13 => "110001101011", 14 => "111111100000", 15 => "000100001011", 
    16 => "000000100000", 17 => "110100010110", 18 => "101111011010", 19 => "110110000011", 
    20 => "110011111010", 21 => "000110111110", 22 => "111010111011", 23 => "111010000111", 
    24 => "000000010111", 25 => "101001011110", 26 => "000111100010", 27 => "001000010111", 
    28 => "000101101001", 29 => "000011110000", 30 => "111010110011", 31 => "000110011001", 
    32 => "001000110001", 33 => "111010110010", 34 => "000111000000", 35 => "111011101111", 
    36 => "110101100001", 37 => "111100011010", 38 => "111001100011", 39 => "110000101100", 
    40 => "101101001101", 41 => "000000000000", 42 => "000111010111", 43 => "000001101010", 
    44 => "110101000010", 45 => "110101010100", 46 => "110010001101", 47 => "111011011001", 
    48 => "000111001010", 49 => "000011010101", 50 => "001010010010", 51 => "000111001000", 
    52 => "110010101100", 53 => "111100100000", 54 => "100111001001", 55 => "000011001011", 
    56 => "111100010010", 57 => "111110010001", 58 => "000010100010", 59 => "001010100011", 
    60 => "000101101000", 61 => "000010010100", 62 => "101100110001", 63 => "000011110100", 
    64 => "110111011011", 65 => "001001111001", 66 => "111001111000", 67 => "111110011100", 
    68 => "111010101011", 69 => "111100100000", 70 => "000110101111", 71 => "000011011010", 
    72 => "001011001000", 73 => "110010110001", 74 => "000100111010", 75 => "000111010010", 
    76 => "000001110111", 77 => "000100110001", 78 => "101010110101", 79 => "111101101000", 
    80 => "111100011100", 81 => "111110000100", 82 => "110000010101", 83 => "111110110101", 
    84 => "000011110010", 85 => "110001000101", 86 => "111011011000", 87 => "111110101110", 
    88 => "110001110010", 89 => "111111010100", 90 => "000110101111", 91 => "001001111011", 
    92 => "000110000110", 93 => "110111010011", 94 => "111001010011", 95 => "001010001100", 
    96 => "111010001001", 97 => "111110100110", 98 => "110101000110", 99 => "001010001100", 
    100 => "111100100111", 101 => "000110001101", 102 => "111110110000", 103 => "111010011111", 
    104 => "000011100011", 105 => "101011001111", 106 => "111010001010", 107 => "111001111011", 
    108 => "000100000000", 109 => "000101111111", 110 => "111001111010", 111 => "000110110000", 
    112 => "000001010110", 113 => "010010011011", 114 => "111000100010", 115 => "111100101010", 
    116 => "111010111110", 117 => "000011111001", 118 => "000100011000", 119 => "110100110100", 
    120 => "000011111111", 121 => "110100101100", 122 => "000111000001", 123 => "001010001111", 
    124 => "110100010100", 125 => "111011101010", 126 => "000010000010", 127 => "111010011011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

