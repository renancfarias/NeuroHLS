-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_4_cjv is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_4_cjv is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111010011010", 1 => "001001010001", 2 => "000110000011", 3 => "111111101110", 
    4 => "111110110001", 5 => "000000100000", 6 => "001011000100", 7 => "111110000100", 
    8 => "000010100111", 9 => "000000110110", 10 => "001001110010", 11 => "110010110101", 
    12 => "000111100111", 13 => "000010110011", 14 => "111011010011", 15 => "000100100000", 
    16 => "111111101101", 17 => "101001101000", 18 => "111101100001", 19 => "001001110000", 
    20 => "110001101000", 21 => "000010001010", 22 => "000100101101", 23 => "111100110000", 
    24 => "000111101100", 25 => "111101100011", 26 => "110101111001", 27 => "101101011111", 
    28 => "101010000111", 29 => "111110100000", 30 => "000011011100", 31 => "101111011111", 
    32 => "110110011010", 33 => "000011110010", 34 => "000110100111", 35 => "110101100110", 
    36 => "111011010101", 37 => "000110011000", 38 => "000011011001", 39 => "001001101111", 
    40 => "001100001101", 41 => "110110111011", 42 => "001010010010", 43 => "101100011010", 
    44 => "111010110110", 45 => "111010010001", 46 => "110100111101", 47 => "110110111011", 
    48 => "000010000100", 49 => "110110101100", 50 => "111011001000", 51 => "110110100011", 
    52 => "111010011001", 53 => "000101010100", 54 => "111001101100", 55 => "110100001100", 
    56 => "000011101101", 57 => "001011010100", 58 => "110010100111", 59 => "010001000001", 
    60 => "000011001011", 61 => "000111100011", 62 => "111110111101", 63 => "110001011001", 
    64 => "000011110010", 65 => "111111101000", 66 => "110101010100", 67 => "000110110011", 
    68 => "111111111110", 69 => "000001100100", 70 => "111110000010", 71 => "000011001110", 
    72 => "001101010111", 73 => "111110100011", 74 => "000011000000", 75 => "111011010001", 
    76 => "110001001101", 77 => "111110000111", 78 => "000001111110", 79 => "000101110111", 
    80 => "000110101010", 81 => "000101100011", 82 => "111001011010", 83 => "000010110111", 
    84 => "010001001111", 85 => "110111101100", 86 => "111000101101", 87 => "110110001001", 
    88 => "000101111110", 89 => "110000110101", 90 => "000011010011", 91 => "110100101111", 
    92 => "000000010001", 93 => "110011011011", 94 => "111111101100", 95 => "000011111101", 
    96 => "000011010000", 97 => "111010111001", 98 => "111100011010", 99 => "111011001110", 
    100 => "000101101000", 101 => "111110001011", 102 => "000001001101", 103 => "111010000001", 
    104 => "111000110100", 105 => "000011001011", 106 => "111111011000", 107 => "111110100111", 
    108 => "110111010011", 109 => "000001101111", 110 => "111000010101", 111 => "101111010010", 
    112 => "110100101100", 113 => "101011111001", 114 => "101111101010", 115 => "111100100111", 
    116 => "000001011100", 117 => "001001010011", 118 => "000010010011", 119 => "111101110001", 
    120 => "000001011110", 121 => "000001010011", 122 => "111110111110", 123 => "001101100011", 
    124 => "000100010101", 125 => "000011010001", 126 => "000011100110", 127 => "000111001010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

