-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_9_cow is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_9_cow is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000010111101", 1 => "000111101010", 2 => "110001010001", 3 => "111110111010", 
    4 => "000010011101", 5 => "110101001110", 6 => "110101110111", 7 => "000110110100", 
    8 => "000100100010", 9 => "111010101000", 10 => "000000010001", 11 => "000000100111", 
    12 => "000011000111", 13 => "000011100100", 14 => "111101101000", 15 => "111101010010", 
    16 => "111111100001", 17 => "111110010101", 18 => "001000000100", 19 => "000011000001", 
    20 => "101101011100", 21 => "101101100100", 22 => "111010111111", 23 => "000100000001", 
    24 => "111001000001", 25 => "111000011000", 26 => "110100010101", 27 => "111000001101", 
    28 => "101110000100", 29 => "000011100111", 30 => "111100111010", 31 => "110010000001", 
    32 => "001000110111", 33 => "000101011011", 34 => "000001111000", 35 => "000100001001", 
    36 => "110110000001", 37 => "000001010000", 38 => "000001001100", 39 => "000110110010", 
    40 => "000111001101", 41 => "111111010000", 42 => "111101101000", 43 => "000101101000", 
    44 => "000010110011", 45 => "111101011011", 46 => "110101111011", 47 => "111100011101", 
    48 => "000100100010", 49 => "111110001011", 50 => "110010010111", 51 => "110111010101", 
    52 => "000101111000", 53 => "000011011000", 54 => "111100101110", 55 => "000001000001", 
    56 => "000001101100", 57 => "110101111011", 58 => "101011111110", 59 => "101111010110", 
    60 => "110011100100", 61 => "111001101000", 62 => "000011110001", 63 => "111110000111", 
    64 => "000101011010", 65 => "000111000101", 66 => "111111011010", 67 => "000101100101", 
    68 => "000010010010", 69 => "111111111001", 70 => "000000000101", 71 => "111101010010", 
    72 => "111110001110", 73 => "000000011001", 74 => "000011001110", 75 => "110110100010", 
    76 => "111010101000", 77 => "001001101000", 78 => "000101100010", 79 => "111010010100", 
    80 => "001001010101", 81 => "111111111110", 82 => "001000110000", 83 => "111111100000", 
    84 => "101111010111", 85 => "111011001101", 86 => "110100110100", 87 => "000110101010", 
    88 => "111000101110", 89 => "110111000000", 90 => "111110011000", 91 => "110001010010", 
    92 => "000111110001", 93 => "000010000010", 94 => "111010000011", 95 => "111110100111", 
    96 => "000100110110", 97 => "110100001001", 98 => "000110110000", 99 => "111011011100", 
    100 => "111101110001", 101 => "111011001111", 102 => "000011110110", 103 => "110101010001", 
    104 => "000011111010", 105 => "000011011001", 106 => "000000000001", 107 => "000110000111", 
    108 => "110100111010", 109 => "000001111011", 110 => "111111010100", 111 => "100110001011", 
    112 => "000100010010", 113 => "111011100111", 114 => "111010001110", 115 => "110111100111", 
    116 => "111010000001", 117 => "111110111001", 118 => "110010010101", 119 => "110011010101", 
    120 => "110111001001", 121 => "000001111001", 122 => "000110011111", 123 => "000111011101", 
    124 => "000011011101", 125 => "000111001010", 126 => "111101100001", 127 => "000101101010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

