-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_0_cfu is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of snn_mnist_hls_lif_layer_10_128_stream_stream_ap_uint_10_0_1_Pipeline_integrate_weights_1_0_cfu is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "101111101011", 1 => "110111111001", 2 => "000000101000", 3 => "110010111101", 
    4 => "111110101011", 5 => "111100100010", 6 => "111111100011", 7 => "001001001111", 
    8 => "000100011111", 9 => "101100000100", 10 => "110111001000", 11 => "000111011011", 
    12 => "000001100110", 13 => "000011100101", 14 => "001100011001", 15 => "110110001100", 
    16 => "110110111111", 17 => "111010110110", 18 => "110100011000", 19 => "000001110010", 
    20 => "111011100110", 21 => "111100001001", 22 => "110010101001", 23 => "001100001110", 
    24 => "001101110010", 25 => "101101001010", 26 => "000101011101", 27 => "000110010110", 
    28 => "000110111110", 29 => "111001010101", 30 => "101010100011", 31 => "000000001111", 
    32 => "000111110001", 33 => "111100100110", 34 => "000101111000", 35 => "000101011100", 
    36 => "110001100101", 37 => "111111001101", 38 => "111001000100", 39 => "101110111010", 
    40 => "100111101001", 41 => "000101000101", 42 => "000110011000", 43 => "000011010101", 
    44 => "000010001110", 45 => "001011110100", 46 => "101101001101", 47 => "110011111001", 
    48 => "110100000101", 49 => "000110100111", 50 => "000101001111", 51 => "110101000011", 
    52 => "111110100000", 53 => "000101111111", 54 => "101111100111", 55 => "000001100001", 
    56 => "110010001101", 57 => "110100001001", 58 => "111010010000", 59 => "110010101010", 
    60 => "000101101100", 61 => "111101011011", 62 => "110100100010", 63 => "000011101010", 
    64 => "101011111100", 65 => "001010001100", 66 => "111110110010", 67 => "111011100011", 
    68 => "000011100010", 69 => "111011001001", 70 => "000100001001", 71 => "111101100111", 
    72 => "000111101110", 73 => "001110101011", 74 => "000011001000", 75 => "000001011000", 
    76 => "000100000111", 77 => "000111000110", 78 => "000110010001", 79 => "111111101101", 
    80 => "000000010100", 81 => "110101000011", 82 => "000100010101", 83 => "001011101001", 
    84 => "111111010101", 85 => "101111110011", 86 => "111100111010", 87 => "000011000011", 
    88 => "000000001100", 89 => "000000001010", 90 => "111111101000", 91 => "000111010001", 
    92 => "000011001101", 93 => "000111011000", 94 => "101111010001", 95 => "111100001000", 
    96 => "111110100100", 97 => "001011010001", 98 => "111000111100", 99 => "101011100011", 
    100 => "111000001101", 101 => "000000001101", 102 => "000001111001", 103 => "000011101000", 
    104 => "111010110011", 105 => "000001110101", 106 => "100111000011", 107 => "000011000000", 
    108 => "000101011100", 109 => "000100001010", 110 => "111100000011", 111 => "001001101111", 
    112 => "111011101110", 113 => "000110010000", 114 => "000111011001", 115 => "000001111110", 
    116 => "111001011011", 117 => "110100000100", 118 => "000110011001", 119 => "000101110100", 
    120 => "111101010010", 121 => "101101011001", 122 => "111001100001", 123 => "000101101100", 
    124 => "000111011111", 125 => "111111110101", 126 => "001000000110", 127 => "000110100000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

